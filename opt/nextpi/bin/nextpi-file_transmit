#!/usr/bin/python -u

# Base us
import argparse

# Filecatcher
import os
import sys
import tty
import termios
import select
import fcntl
from datetime import datetime
import time
usleep = lambda x: time.sleep(x/1000.0)

timeout = " Timeout"
ERROR = " ERROR\n"

dirs = ['/', '/ram/', '/NextPi/']
default_timeout = 1000
max_filesize = 4294967295
current_version = "0.06A"


# "System"
def version():
    verbose("version: "+current_version)
    send_bytes(current_version)


def exit(e):
    termios.tcsetattr(stdin, termios.TCSADRAIN, old_settings)
    fcntl.fcntl(stdin, fcntl.F_SETFL, old_flags)
    os.system("stty echo")
    verbose("exiting gracefully...")
    logfile.flush()
    logfile.close()
    sys.exit(e)


def log(d):
    logfile.write(d+'\n')
    logfile.flush()


def verbose(d):
    if args.vl:
        logfile.write(" V>  ")
        log(d)


# Comms primitives
def send_bytes(string):
    if isinstance(string, str):
        b = bytearray()
        b.extend(string)
        string = b
    for substr in range(0, len(string), 512):
        verbose(substr.__str__()+" parts sent")
        for i, v in enumerate(string[substr:substr+512]):
            send_byte(v)
            time.sleep(0)


def get_bytes(length):
    class TimeOut(Exception):
        pass

    t = default_timeout
    try:
        # Make sure we have a byte to read...
        while sys.stdin not in select.select([sys.stdin], [], [], 0)[0]:
            t = t - 1
            usleep(1)
            if t is 0:
                raise TimeOut
        # verbose("GOT "+ord(byte).__str__())
    except TimeOut:
        log("get_byte"+timeout+ERROR)
        send_bytes(timeout+ERROR)
        exit(255)

    try:
        buf = sys.stdin.read(length)
    except IOError:
        log("IOError")
        send_bytes("IO"+ERROR)
        exit(255)

    return buf


def get_byte():
    class TimeOut(Exception):
        pass

    t = default_timeout
    try:
        # Make sure we have a byte to read...
        while sys.stdin not in select.select([sys.stdin], [], [], 0)[0]:
            t = t - 1
            usleep(1)
            if t is 0:
                raise TimeOut
        # Read the byte we know, for sure, is there...
        byte = sys.stdin.read(1)
        verbose("GOT "+ord(byte).__str__())
    except TimeOut:
        log("get_byte"+timeout+ERROR)
        send_bytes(timeout+ERROR)
        exit(255)

    return ord(byte)


def send_byte(byte):
    # global bcount
    # verbose("ByteCount: "+bcount.__str__())
    # verbose(" Sending "+byte.__str__())
    # sys.stderr.write(chr(byte))
    os.write(sys.stderr.fileno(), chr(byte))


# Comms utilities
def get_int(int_length):
    verbose("Getting an int")
    int_value = 0
    while int_length:
        verbose("getint "+"waiting for : "+int_length.__str__()+" bytes. ")
        nextbyte = get_byte()
        int_value = (int_value << 8) + nextbyte
        verbose("getint "+"got: "+nextbyte.__str__()+" Value now: "+int_value.__str__()+". ")
        int_length = int_length - 1
    verbose("getint "+"final: "+int_value.__str__())
    return int_value


def get_string():
    string = ""
    byte = get_byte()
    while byte is not 0:
        string = string + str(unichr(byte))
        verbose("getstring "+"got: "+byte.__str__()+" string now: "+string)
        byte = get_byte()

    verbose("getstring "+"final: "+string)
    return string


def send_ok():
    send_bytes("OK\n")


# Logic
def send_block_and_validate_nbn(blocklen):
    verbose(" Reading in "+blocklen.__str__())
    block = bytearray()
    block.extend(filein.read(blocklen))
    verbose(" Read in "+len(block).__str__())

    checksum = (sum(block) % 256)
    while True:
        send_bytes(block)
        verbose("checksum"+checksum.__str__())

        send_byte(checksum)

        if get_byte() == 33:                     # send Client confirmation that things worked
            return True

        log(" received checksum (sent "+checksum.__str__()+"ERR")


def file_sender_nbn(blocksize):
    global filein
    label = "file_sender_nbn"
    log("Starting "+label)

    send_ok()

    partition = get_int(1)
    log(" PAR: "+partition.__str__())

    filename = get_string()
    log(" DIR: "+filename)

    verbose(" Opening "+dirs[partition]+filename)
    filein = open(dirs[partition]+filename, "rb")

    size = os.path.getsize(dirs[partition]+filename)
    log(" SIZ: "+size.__str__())
    if size > max_filesize:
        log("max_filesize"+ERROR)
        send_bytes("max_filesize"+ERROR)
        exit(255)
    send_byte((size >> 24) & 255)
    send_byte((size >> 16) & 255)
    send_byte((size >> 8) & 255)
    send_byte((size >> 0) & 255)
    verbose("SIZ done")

    blocks = int(size/blocksize)
    log(" BLK: "+blocks.__str__())
    send_byte((blocks >> 24) & 255)
    send_byte((blocks >> 16) & 255)
    send_byte((blocks >> 8) & 255)
    send_byte((blocks >> 0) & 255)
    verbose("BLK done")

    remainder = size % blocksize
    log(" REM: "+remainder.__str__())
    send_byte((remainder >> 8) & 255)
    send_byte((remainder >> 0) & 255)
    verbose("REM done")

    nbn_status = get_byte()

    if nbn_status == '<':
        log("Client error during (blocks*blocksize)+remainder check ("+((blocks*blocksize)+remainder).__str__()
            + ") ERROR\n")
        exit(253)

    while blocks:
        send_block_and_validate_nbn(blocksize)
        log(" (sent: "+blocks.__str__() + ")")
        blocks = blocks - 1

    send_block_and_validate_nbn(remainder)

    log("Done "+label)


# Main
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='NextPi File Transmitter')

    parser.add_argument('-v', action="store_true")          # Version, and done
    parser.add_argument('-vl', action="store_true")         # Verbose Logging
    parser.add_argument('-nbn', action="store_true")        # File pitcher (NBN)

    args = parser.parse_args()

    stdin = sys.stdin.fileno()

    # Make stdin non blocking
    old_flags = fcntl.fcntl(stdin, fcntl.F_GETFL)
    fcntl.fcntl(stdin, fcntl.F_SETFL, old_flags | os.O_NONBLOCK)
    old_settings = termios.tcgetattr(stdin)
    tty.setraw(stdin)
    logfile = open("/tmp/uihelper.log", "w")

    verbose("log++")

    if args.v:
        version()
        exit(0)

    if args.nbn:
        file_sender_nbn(16384)
        exit(0)

    exit(0)
